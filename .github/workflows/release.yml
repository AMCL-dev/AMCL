name: Build and Release

on:
  push:
    branches: [ "**" ]
    tags: [ "v*" ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: brew install gettext
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        architecture: 'x64'
    
    - name: Install UV
      run: |
        pip install --no-cache-dir uv
    
    - name: Install project dependencies
      run: |
        uv sync --no-dev
      continue-on-error: true
    
    - name: Install Ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dri mesa-common-dev libglu1-mesa libglib2.0-0
    
    - name: Install UPX (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get install -y upx
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          brew install upx
        fi
    
    - name: Create build config
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo '{"visual_studio": {"vcvars64_path": "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"}, "cmake": {"executable_path": "cmake"}, "build": {"parallel_jobs": 4}}' > build_config.json
        else
          echo '{"cmake": {"executable_path": "cmake"}, "build": {"parallel_jobs": 4}}' > build_config.json
        fi
      shell: bash
    
    - name: Build project
      run: uv run python scripts/build.py
      continue-on-error: true
    
    - name: Package artifacts
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          mv dist/amcl dist/AMCL-Windows-x64
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          mv dist/amcl dist/AMCL-Linux-x64
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          mv dist/amcl dist/AMCL-macOS-x64
        fi
    
    - name: Upload Release Assets
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/AMCL-Windows-x64/**
          dist/AMCL-Linux-x64/**
          dist/AMCL-macOS-x64/**
        draft: false
        prerelease: false
        generate_release_notes: true
