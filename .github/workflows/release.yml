name: Build Application

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 120
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "4.0.0"

      - name: Install system dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y libgtk-3-dev libnotify-dev libsecret-1-dev libx11-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            xcode-select --install 2>/dev/null || true
          fi
        shell: bash

      - name: Install WinToast (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/mohabouje/WinToast.git
          cd WinToast
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=../../winToast_install
          cmake --build . --config Release
          cmake --install .
          
          # 创建 WinToast 的 CMake 配置文件
          mkdir -p ../../winToast_install/share/unofficial-wintoast
          cat > ../../winToast_install/share/unofficial-wintoast/unofficial-wintoast-config.cmake << 'EOF'
          # WinToast 配置文件
          include(CMakeFindDependencyMacro)
          
          # 创建导入目标
          if(NOT TARGET unofficial::wintoast::wintoast)
              add_library(unofficial::wintoast::wintoast INTERFACE IMPORTED)
              set_target_properties(unofficial::wintoast::wintoast PROPERTIES
                INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../../include"
                INTERFACE_LINK_LIBRARIES "${CMAKE_CURRENT_LIST_DIR}/../../lib/wintoast.lib"
              )
          endif()
          
          # 提供包信息
          set(unofficial-wintoast_FOUND TRUE)
          set(unofficial-wintoast_VERSION "1.2.0")
          EOF
          
          # 输出安装内容以供调试
          echo "WinToast 安装内容:"
          find ../../winToast_install -type f -name "*.lib" -o -name "*.h" -o -name "*.cmake"
        shell: bash

      - name: Install dependencies
        run: |
          pip install nuitka PySide6

      - name: Build with Nuitka
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            python -m nuitka -oAMCL --standalone --lto=yes --disable-ccache --include-data-dir=amcl/assets=assets --enable-plugin=pyside6 --jobs=1 --output-dir=build --remove-output --assume-yes-for-downloads --mingw64 --windows-console-mode=disable amcl/src/amcl.py
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            python -m nuitka -oAMCL --standalone --lto=yes --disable-ccache --include-data-dir=amcl/assets=assets --enable-plugin=pyside6 --jobs=1 --output-dir=build --remove-output --assume-yes-for-downloads --macos-create-app-bundle amcl/src/amcl.py
          else
            python -m nuitka -oAMCL --standalone --lto=yes --disable-ccache --include-data-dir=amcl/assets=assets --enable-plugin=pyside6 --jobs=1 --output-dir=build --remove-output --assume-yes-for-downloads amcl/src/amcl.py
          fi
        shell: bash
        timeout-minutes: 60

      - name: Setup MSVC on Windows
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1

      - name: Build launcher
        run: |
          mkdir -p launcher/build
          cd launcher/build
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # 设置 CMAKE_PREFIX_PATH 包含 WinToast 安装目录
            export CMAKE_PREFIX_PATH="../../winToast_install;${CMAKE_PREFIX_PATH}"
            echo "CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}"
            cmake .. -DCMAKE_PREFIX_PATH="../../winToast_install"
          else
            cmake .. -DSKIP_WINTOAST=ON
          fi
          
          cmake --build . --config Release -j 2
        shell: bash

      - name: Package artifacts
        run: |
          mkdir -p dist
          if [ -d "build" ]; then
            mv build dist/amcl
          fi
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            mkdir -p dist/launcher
            cp launcher/build/Release/AMCL.exe dist/launcher/ 2>/dev/null || cp launcher/build/AMCL dist/launcher/
          else
            mkdir -p dist/launcher
            cp launcher/build/AMCL dist/launcher/
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-python${{ matrix.python-version }}
          path: dist/
          
