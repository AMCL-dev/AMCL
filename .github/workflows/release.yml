name: Build Application

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 120  # 增加超时时间到2小时
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']
      fail-fast: false  # 即使一个作业失败，其他作业也会继续运行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "3.30.0"  # 修复参数名

      - name: Install system dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y libgtk-3-dev libnotify-dev libsecret-1-dev libx11-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            # 在 macOS 上安装 CoreFoundation 开发包
            xcode-select --install 2>/dev/null || true
          fi
        shell: bash

      - name: Install WinToast (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/mohabouje/WinToast.git
          cd WinToast
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=../../vcpkg_installed/x64-windows
          cmake --build . --config Release
          cmake --install .
          
          mkdir -p ../../vcpkg_installed/x64-windows/share/unofficial-wintoast
          cat > ../../vcpkg_installed/x64-windows/share/unofficial-wintoast/unofficial-wintoast-config.cmake << 'EOF'
          include(CMakeFindDependencyMacro)
          find_dependency(unofficial-wintoast REQUIRED)
          
          if(NOT TARGET unofficial::wintoast::wintoast)
              add_library(unofficial::wintoast::wintoast INTERFACE IMPORTED)
              set_target_properties(unofficial::wintoast::wintoast PROPERTIES
                  INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../../include"
                  INTERFACE_LINK_LIBRARIES "${CMAKE_CURRENT_LIST_DIR}/../../lib/wintoast.lib"
              )
          endif()
          EOF
        shell: bash

      - name: Install dependencies
        run: |
          pip install nuitka PySide6

      - name: Build with Nuitka
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            python -m nuitka -oAMCL --standalone --lto=yes --disable-ccache --include-data-dir=amcl/assets=assets --enable-plugin=pyside6 --jobs=1 --output-dir=build --remove-output --assume-yes-for-downloads --mingw64 --windows-console-mode=disable amcl/src/amcl.py
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            python -m nuitka -oAMCL --standalone --lto=yes --disable-ccache --include-data-dir=amcl/assets=assets --enable-plugin=pyside6 --jobs=1 --output-dir=build --remove-output --assume-yes-for-downloads --macos-create-app-bundle amcl/src/amcl.py
          else
            python -m nuitka -oAMCL --standalone --lto=yes --disable-ccache --include-data-dir=amcl/assets=assets --enable-plugin=pyside6 --jobs=1 --output-dir=build --remove-output --assume-yes-for-downloads amcl/src/amcl.py
          fi
        shell: bash
        timeout-minutes: 60  # 为 Nuitka 步骤单独设置超时

      - name: Setup MSVC on Windows
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1

      - name: Build launcher
        run: |
          mkdir -p launcher/build
          cd launcher/build
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake .. -DCMAKE_PREFIX_PATH=../../vcpkg_installed/x64-windows
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            # 在 macOS 上，添加 CoreFoundation 框架链接
            cmake .. -DSKIP_WINTOAST=ON -DCMAKE_EXE_LINKER_FLAGS="-framework CoreFoundation"
          else
            cmake .. -DSKIP_WINTOAST=ON
          fi
          
          cmake --build . --config Release -j 2
        shell: bash

      - name: Package artifacts
        run: |
          mkdir -p dist
          if [ -d "build" ]; then
            mv build dist/amcl
          fi
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            mkdir -p dist/launcher
            cp launcher/build/Release/AMCL.exe dist/launcher/ 2>/dev/null || cp launcher/build/AMCL dist/launcher/
          else
            mkdir -p dist/launcher
            cp launcher/build/AMCL dist/launcher/
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-python${{ matrix.python-version }}
          path: dist/
