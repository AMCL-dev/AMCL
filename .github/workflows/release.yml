name: Build Application

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 120
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Copy WinToast headers
        run: |
          # Find WinToast directory and copy headers to src
          WINTOAST=$(find . -type d -name WinToast -print -quit)
          if [ -n "$WINTOAST" ] && [ -d "$WINTOAST/include" ]; then
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              # Windows copy command
              xcopy /E /Y "$WINTOAST\\include\\*" "$WINTOAST\\src\\"
            else
              # Unix copy command
              cp -r "$WINTOAST/include/"* "$WINTOAST/src/"
            fi
          fi
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Install system dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y libgtk-3-dev libnotify-dev libsecret-1-dev libx11-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            xcode-select --install 2>/dev/null || true
          fi

      - name: Install dependencies
        run: |
          pip install nuitka PySide6

      - name: Build with Nuitka
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            python -m nuitka -oAMCL --standalone --lto=yes --disable-ccache --include-data-dir=amcl/assets=assets --enable-plugin=pyside6 --jobs=1 --output-dir=build --remove-output --assume-yes-for-downloads --mingw64 --windows-console-mode=disable amcl/src/amcl.py
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            python -m nuitka -oAMCL --standalone --lto=yes --disable-ccache --include-data-dir=amcl/assets=assets --enable-plugin=pyside6 --jobs=1 --output-dir=build --remove-output --assume-yes-for-downloads --macos-create-app-bundle amcl/src/amcl.py
          else
            python -m nuitka -oAMCL --standalone --lto=yes --disable-ccache --include-data-dir=amcl/assets=assets --enable-plugin=pyside6 --jobs=1 --output-dir=build --remove-output --assume-yes-for-downloads amcl/src/amcl.py
          fi
        timeout-minutes: 60

      - name: Setup MSVC on Windows
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1

      - name: Build launcher
        run: |
          mkdir -p launcher/build
          cd launcher/build
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake .. -G "Visual Studio 17 2022" -A x64
          else
            cmake ..
          fi
          
          cmake --build . --config Release -j 2

      - name: Package artifacts
        run: |
          mkdir -p dist
          if [ -d "build" ]; then
            mv build dist/amcl
          fi
          
          mkdir -p dist/launcher
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp launcher/build/Release/AMCL.exe dist/launcher/ 2>/dev/null || cp launcher/build/AMCL.exe dist/launcher/
          else
            cp launcher/build/AMCL dist/launcher/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-python${{ matrix.python-version }}
          path: dist/
